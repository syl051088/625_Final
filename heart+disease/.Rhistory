}
}
# Step 4: Convert each patient's data to numeric, handling missing values
numeric_records <- lapply(patient_records, function(record) {
# Replace '-9' and '-9.0' with NA
record[record %in% c("-9", "-9.0")] <- NA
# Convert to numeric, ignoring non-numeric entries
numeric_data <- suppressWarnings(as.numeric(record))
return(numeric_data)
})
# Step 5: Find the maximum number of data points in any patient record
max_length <- max(sapply(numeric_records, length))
# Step 6: Ensure all patient records have the same length by padding with NA
uniform_records <- lapply(numeric_records, function(record) {
length(record) <- max_length
return(record)
})
# Step 7: Combine all patient records into a single data frame
data_frame <- do.call(rbind, uniform_records)
data_frame <- as.data.frame(data_frame, stringsAsFactors = FALSE)
# Step 8: Name the columns as V1 to V76
total_attributes <- 76
current_columns <- ncol(data_frame)
if (current_columns < total_attributes) {
warning(paste("Dataset", dataset_label, "has fewer columns (", current_columns,
") than expected (", total_attributes, "). Filling missing columns with NA.", sep = " "))
# Add empty columns filled with NA
data_frame[(current_columns + 1):total_attributes] <- NA
} else if (current_columns > total_attributes) {
warning(paste("Dataset", dataset_label, "has more columns (", current_columns,
") than expected (", total_attributes, "). Extra columns will be removed.", sep = " "))
# Remove extra columns beyond the 76th
data_frame <- data_frame[, 1:total_attributes]
}
# Assign column names V1 to V76
colnames(data_frame) <- paste0("V", 1:total_attributes)
# Step 9: Keep only the 14 important columns based on your information
important_columns <- c(3, 4, 9, 10, 12, 16, 19, 32, 38, 40, 41, 44, 51, 58)
data_subset <- data_frame[, important_columns]
# Rename the columns to meaningful names
colnames(data_subset) <- c(
"age", "sex", "chest_pain_type", "resting_bp", "cholesterol",
"fasting_blood_sugar", "resting_ecg", "max_heart_rate", "exercise_induced_angina",
"st_depression", "st_slope", "num_major_vessels", "thalassemia", "num_diagnosis"
)
# Step 10: Convert specific columns to categorical factors
categorical_columns <- c("sex", "chest_pain_type", "fasting_blood_sugar",
"resting_ecg", "exercise_induced_angina", "st_slope",
"num_major_vessels", "thalassemia")
data_subset[categorical_columns] <- lapply(data_subset[categorical_columns], factor)
# Step 11: Handle missing values
# For numeric columns, replace NA with the column's mean
numeric_columns <- setdiff(colnames(data_subset), categorical_columns)
data_subset[numeric_columns] <- lapply(data_subset[numeric_columns], function(column) {
replace(column, is.na(column), mean(column, na.rm = TRUE))
})
# For categorical columns, replace NA with 'Unknown'
data_subset[categorical_columns] <- lapply(data_subset[categorical_columns], function(column) {
levels(column) <- c(levels(column), "Unknown")
replace(column, is.na(column), "Unknown")
})
# Step 12: Recode categorical variables to have descriptive labels
# Recode 'sex' from 0 and 1 to 'female' and 'male'
data_subset$sex <- factor(data_subset$sex,
levels = c("0", "1", "Unknown"),
labels = c("female", "male", "Unknown"))
# Recode 'chest_pain_type' to descriptive names
data_subset$chest_pain_type <- factor(data_subset$chest_pain_type,
levels = c("1", "2", "3", "4", "Unknown"),
labels = c("typical angina", "atypical angina",
"non-anginal pain", "asymptomatic",
"Unknown"))
# Recode 'fasting_blood_sugar' to 'False' and 'True'
data_subset$fasting_blood_sugar <- factor(data_subset$fasting_blood_sugar,
levels = c("0", "1", "Unknown"),
labels = c("False", "True", "Unknown"))
# Recode 'resting_ecg' to descriptive names
data_subset$resting_ecg <- factor(data_subset$resting_ecg,
levels = c("0", "1", "2", "Unknown"),
labels = c("Normal", "ST-T wave abnormality",
"Left ventricular hypertrophy", "Unknown"))
# Recode 'exercise_induced_angina' to 'No' and 'Yes'
data_subset$exercise_induced_angina <- factor(data_subset$exercise_induced_angina,
levels = c("0", "1", "Unknown"),
labels = c("No", "Yes", "Unknown"))
# Recode 'st_slope' to descriptive names
data_subset$st_slope <- factor(data_subset$st_slope,
levels = c("1", "2", "3", "Unknown"),
labels = c("upsloping", "flat", "downsloping", "Unknown"))
# Recode 'num_major_vessels' to include 'Unknown'
data_subset$num_major_vessels <- factor(data_subset$num_major_vessels,
levels = c("0", "1", "2", "3", "Unknown"),
labels = c("0", "1", "2", "3", "Unknown"))
# Recode 'thalassemia' to descriptive names
data_subset$thalassemia <- factor(data_subset$thalassemia,
levels = c("3", "6", "7", "Unknown"),
labels = c("normal", "fixed defect", "reversible defect", "Unknown"))
# Step 13: Display a summary and structure of the cleaned data
cat("Summary of", dataset_label, "dataset:\n")
print(summary(data_subset))
cat("\nStructure of", dataset_label, "dataset:\n")
print(str(data_subset))
# Step 14: Save the cleaned data to CSV and RDS formats
# Define the filenames for the cleaned data
cleaned_csv <- file.path(data_folder, paste0(dataset_label, "_cleaned.csv"))
cleaned_rds <- file.path(data_folder, paste0(dataset_label, "_cleaned.rds"))
# Save as CSV
write.csv(data_subset, cleaned_csv, row.names = FALSE)
# Save as RDS (R's internal format for faster loading)
saveRDS(data_subset, cleaned_rds)
cat("Finished processing and saved cleaned data for:", dataset_label, "\n\n")
# Return the cleaned data frame
return(data_subset)
}
library("sas7bdat")
data = read.sas7bdat("~/Desktop/BIOSTATS650/hw6/completedata.sas7bdat")
# Calculate quartiles for Age
quartiles <- quantile(data$Age, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
# Create age categories based on quartiles
data$age_cat <- with(data, ifelse(
Age <= quartiles[1], 0,
ifelse(Age <= quartiles[2], 1,
ifelse(Age <= quartiles[3], 2, 3))
))
# Load necessary library
library(dplyr)
# Calculate descriptive statistics
desc_stats <- data %>%
group_by(age_cat) %>%
summarise(
Count = n(),
Percentage = (n() / nrow(data)) * 100,
Depression_Mean = mean(Depression, na.rm = TRUE),
Depression_SD = sd(Depression, na.rm = TRUE),
Depression_Median = median(Depression, na.rm = TRUE),
Depression_Min = min(Depression, na.rm = TRUE),
Depression_Max = max(Depression, na.rm = TRUE),
Age_Mean = mean(Age, na.rm = TRUE),
Age_SD = sd(Age, na.rm = TRUE),
Age_Median = median(Age, na.rm = TRUE),
Age_Min = min(Age, na.rm = TRUE),
Age_Max = max(Age, na.rm = TRUE)
)
# View the descriptive statistics
print(desc_stats)
# Load necessary library
library(dplyr)
# Calculate descriptive statistics
descriptive <- data %>%
group_by(age_cat) %>%
summarise(
Count = n(),
Percentage = (n() / nrow(data)) * 100,
Depression_Mean = mean(Depression, na.rm = TRUE),
Depression_SD = sd(Depression, na.rm = TRUE),
Depression_Median = median(Depression, na.rm = TRUE),
Depression_Min = min(Depression, na.rm = TRUE),
Depression_Max = max(Depression, na.rm = TRUE),
Age_Mean = mean(Age, na.rm = TRUE),
Age_SD = sd(Age, na.rm = TRUE),
Age_Median = median(Age, na.rm = TRUE),
Age_Min = min(Age, na.rm = TRUE),
Age_Max = max(Age, na.rm = TRUE)
)
# View the descriptive statistics
print(descriptive)
mean_fatalism <- mean(data$Fatalism, na.rm = TRUE)
iqr_fatalism <- IQR(data$Fatalism, na.rm = TRUE)
data$fatalism_c <- (data$Fatalism - mean_fatalism) / iqr_fatalism
model_c <- lm(Depression ~ factor(age_cat) + fatalism_c + Sex + Race_Ethnicity, data = data)
library("sas7bdat")
data = read.sas7bdat("~/Desktop/BIOSTATS650/hw6/completedata.sas7bdat")
head(data)
library("sas7bdat")
data = read.sas7bdat("~/Desktop/BIOSTATS650/hw6/completedata.sas7bdat")
colnames(data)
library("sas7bdat")
data = read.sas7bdat("~/Desktop/BIOSTATS650/hw6/completedata.sas7bdat")
quartiles <- quantile(data$Age, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
data$age <- with(data, ifelse(
Age <= quartiles[1], 0,
ifelse(Age <= quartiles[2], 1,
ifelse(Age <= quartiles[3], 2, 3))
))
# Load necessary library
library(dplyr)
# Calculate descriptive statistics
descriptive <- data %>%
group_by(age) %>%
summarise(
Count = n(),
Percentage = (n() / nrow(data)) * 100,
Depression_Mean = mean(Depression, na.rm = TRUE),
Depression_SD = sd(Depression, na.rm = TRUE),
Depression_Median = median(Depression, na.rm = TRUE),
Depression_Min = min(Depression, na.rm = TRUE),
Depression_Max = max(Depression, na.rm = TRUE),
Age_Mean = mean(Age, na.rm = TRUE),
Age_SD = sd(Age, na.rm = TRUE),
Age_Median = median(Age, na.rm = TRUE),
Age_Min = min(Age, na.rm = TRUE),
Age_Max = max(Age, na.rm = TRUE)
)
# View the descriptive statistics
print(descriptive)
# Load necessary library
library(dplyr)
# Center and scale Fatalism
mean_fatalism <- mean(data$Fatalism, na.rm = TRUE)
iqr_fatalism <- IQR(data$Fatalism, na.rm = TRUE)
data$fatalism_c <- (data$Fatalism - mean_fatalism) / iqr_fatalism
# Fit the regression model
model_c <- lm(Depression ~ factor(age_cat) + fatalism_c + Sex + R_E, data = data)
# Load necessary library
library(dplyr)
# Center and scale Fatalism
mean_fatalism <- mean(data$Fatalism, na.rm = TRUE)
iqr_fatalism <- IQR(data$Fatalism, na.rm = TRUE)
data$fatalism_c <- (data$Fatalism - mean_fatalism) / iqr_fatalism
# Fit the regression model
model_c <- lm(Depression ~ factor(age) + fatalism_c + Sex + R_E, data = data)
# View the summary of the model
summary(model_c)
reduce <- lm(Depression ~ fatalism_c + Sex + R_E, data = data)
# Compare the reduced model with the full model using ANOVA
anova_table <- anova(reduce, model_c)
print(anova_table)
# Fit the regression model with age_cat as a continuous predictor
model_e <- lm(Depression ~ age_cat + fatalism_c + Sex + R_E, data = data)
# Fit the regression model with age_cat as a continuous predictor
model_e <- lm(Depression ~ age + fatalism_c + Sex + R_E, data = data)
# View the summary of the model
summary(model_e)
# Extract the p-value for age_cat from model_e
summary_e <- summary(model_e)
beta_age_cat <- summary_e$coefficients["age_cat", "Estimate"]
# Extract the p-value for age_cat from model_e
summary_e <- summary(model_e)
beta_age_cat <- summary_e$coefficients["age", "Estimate"]
se_age_cat <- summary_e$coefficients["age", "Std. Error"]
t_value <- summary_e$coefficients["age", "t value"]
p_value <- summary_e$coefficients["age", "Pr(>|t|)"]
# Print the results
cat("Beta coefficient for age_cat:", beta_age_cat, "\n")
cat("Standard Error:", se_age_cat, "\n")
cat("t-statistic:", t_value, "\n")
cat("p-value:", p_value, "\n")
# Decision
if(p_value < 0.05){
cat("Reject the null hypothesis: There is a significant trend.\n")
} else {
cat("Fail to reject the null hypothesis: No significant trend.\n")
}
# Fit Model Continuous: Age as original continuous variable, centered and scaled
mean_age <- mean(data$Age, na.rm = TRUE)
iqr_age <- IQR(data$Age, na.rm = TRUE)
data$Age_cont <- (data$Age - mean_age) / iqr_age
model_continuous <- lm(Depression ~ Age_cont + fatalism_c + Sex + R_E, data = data)
# Get summaries
summary_c <- summary(model_c)
summary_e <- summary(model_e)
summary_cont <- summary(model_continuous)
# Extract coefficients
coeff_c <- summary_c$coefficients
coeff_e <- summary_e$coefficients
coeff_cont <- summary_cont$coefficients
# Create a table for comparison
comparison <- data.frame(
Term = rownames(coeff_c),
Model_C_Coeff = coeff_c[, "Estimate"],
Model_E_Coeff = coeff_e[, "Estimate"],
Model_Cont_Coeff = NA  # Initialize with NA
)
quartiles <- quantile(data$Age, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
data$age <- with(data, ifelse(
Age <= quartiles[1], 0,
ifelse(Age <= quartiles[2], 1,
ifelse(Age <= quartiles[3], 2, 3))
))
# Load necessary library
library(dplyr)
# Calculate descriptive statistics
descriptive <- data %>%
group_by(age) %>%
summarise(
Count = n(),
Percentage = (n() / nrow(data)) * 100,
Depression_Mean = mean(Depression, na.rm = TRUE),
Depression_SD = sd(Depression, na.rm = TRUE),
Depression_Median = median(Depression, na.rm = TRUE),
Depression_Min = min(Depression, na.rm = TRUE),
Depression_Max = max(Depression, na.rm = TRUE),
Age_Mean = mean(Age, na.rm = TRUE),
Age_SD = sd(Age, na.rm = TRUE),
Age_Median = median(Age, na.rm = TRUE),
Age_Min = min(Age, na.rm = TRUE),
Age_Max = max(Age, na.rm = TRUE)
)
# View the descriptive statistics
print(descriptive)
library(dplyr)
mean_fatalism <- mean(data$Fatalism, na.rm = TRUE)
iqr_fatalism <- IQR(data$Fatalism, na.rm = TRUE)
data$fatalism_c <- (data$Fatalism - mean_fatalism) / iqr_fatalism
model_c <- lm(Depression ~ factor(age) + fatalism_c + Sex + R_E, data = data)
summary(model_c)
reduce <- lm(Depression ~ fatalism_c + Sex + R_E, data = data)
# Compare the reduced model with the full model using ANOVA
anova_table <- anova(reduce, model_c)
print(anova_table)
# Fit the regression model with age_cat as a continuous predictor
model_e <- lm(Depression ~ age + fatalism_c + Sex + R_E, data = data)
# View the summary of the model
summary(model_e)
# Extract the p-value for age_cat from model_e
summary_e <- summary(model_e)
beta_age_cat <- summary_e$coefficients["age", "Estimate"]
se_age_cat <- summary_e$coefficients["age", "Std. Error"]
t_value <- summary_e$coefficients["age", "t value"]
p_value <- summary_e$coefficients["age", "Pr(>|t|)"]
# Print the results
cat("Beta coefficient for age_cat:", beta_age_cat, "\n")
cat("Standard Error:", se_age_cat, "\n")
cat("t-statistic:", t_value, "\n")
cat("p-value:", p_value, "\n")
# Decision
if(p_value < 0.05){
cat("Reject the null hypothesis: There is a significant trend.\n")
} else {
cat("Fail to reject the null hypothesis: No significant trend.\n")
}
# Step 1: Fit Model Continuous
# Center and scale the original Age variable
mean_age <- mean(data$Age, na.rm = TRUE)
iqr_age <- IQR(data$Age, na.rm = TRUE)
data$Age_cont <- (data$Age - mean_age) / iqr_age
# Fit the regression model with Age_cont as a continuous predictor
model_continuous <- lm(Depression ~ Age_cont + fatalism_c + Sex + R_E, data = data)
# Step 2: Extract Coefficients from All Models
# Extract coefficients from Model C
coeff_c <- summary(model_c)$coefficients
# Extract coefficients from Model E
coeff_e <- summary(model_e)$coefficients
# Extract coefficients from Model Continuous
coeff_cont <- summary(model_continuous)$coefficients
# Step 3: Create a Comparison Table
# We'll focus on fatalism_c, Sex, and R_E
# Create a data frame for comparison
comparison_table <- data.frame(
Predictor = c("fatalism_c", "Sex", "R_E"),
Model_C_Estimate = coeff_c[c("fatalism_c", "Sex", "R_E"), "Estimate"],
Model_E_Estimate = coeff_e[c("fatalism_c", "Sex", "R_E"), "Estimate"],
Model_Continuous_Estimate = coeff_cont[c("fatalism_c", "Sex", "R_E"), "Estimate"]
)
# View the comparison table
print(comparison_table)
# Step 1: Create New Age Score Variables
# Scheme 1: Scores 0, 10, 20, 30
data$age_score_10 <- with(data, ifelse(
age == 0, 0,
ifelse(age == 1, 10,
ifelse(age == 2, 20, 30))
))
# Scheme 2: Scores 0, 10, 20, 300
data$age_score_300 <- with(data, ifelse(
age == 0, 0,
ifelse(age == 1, 10,
ifelse(age == 2, 20, 300))
))
# Scheme 3: Average Age per Category
# Assuming you have the average ages from the descriptive statistics
# Let's extract them
avg_ages <- descriptive %>% arrange(age) %>% pull(Age_Mean)
data$age_score_avg <- with(data, ifelse(
age == 0, avg_ages[1],
ifelse(age == 1, avg_ages[2],
ifelse(age == 2, avg_ages[3], avg_ages[4]))
))
# Step 2: Fit Regression Models with Each Scoring Scheme
# Model with age_score_10
model_h1 <- lm(Depression ~ age_score_10 + fatalism_c + Sex + R_E, data = data)
summary_h1 <- summary(model_h1)
# Model with age_score_300
model_h2 <- lm(Depression ~ age_score_300 + fatalism_c + Sex + R_E, data = data)
summary_h2 <- summary(model_h2)
# Model with age_score_avg
model_h3 <- lm(Depression ~ age_score_avg + fatalism_c + Sex + R_E, data = data)
summary_h3 <- summary(model_h3)
# Step 3: Extract p-values
p_h1 <- summary_h1$coefficients["age_score_10", "Pr(>|t|)"]
p_h2 <- summary_h2$coefficients["age_score_300", "Pr(>|t|)"]
p_h3 <- summary_h3$coefficients["age_score_avg", "Pr(>|t|)"]
# Step 4: Create a Table of p-values
trend_pvalues <- data.frame(
Age_Score_Scheme = c("0, 10, 20, 30", "0, 10, 20, 300", "Average Age"),
P_Value = c(p_h1, p_h2, p_h3)
)
# View the p-values
print(trend_pvalues)
quartiles <- quantile(data$Age, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
data$age <- with(data, ifelse(
Age <= quartiles[1], 0,
ifelse(Age <= quartiles[2], 1,
ifelse(Age <= quartiles[3], 2, 3))
))
# Load necessary library
library(dplyr)
# Calculate descriptive statistics
descriptive <- data %>%
group_by(age) %>%
summarise(
Count = n(),
Percentage = (n() / nrow(data)) * 100,
Depression_Mean = mean(Depression, na.rm = TRUE),
Depression_SD = sd(Depression, na.rm = TRUE),
Depression_Median = median(Depression, na.rm = TRUE),
Depression_Min = min(Depression, na.rm = TRUE),
Depression_Max = max(Depression, na.rm = TRUE),
Age_Mean = mean(Age, na.rm = TRUE),
Age_SD = sd(Age, na.rm = TRUE),
Age_Median = median(Age, na.rm = TRUE),
Age_Min = min(Age, na.rm = TRUE),
Age_Max = max(Age, na.rm = TRUE)
)
# View the descriptive statistics
print(descriptive)
library(dplyr)
mean_fatalism <- mean(data$Fatalism, na.rm = TRUE)
iqr_fatalism <- IQR(data$Fatalism, na.rm = TRUE)
data$fatalism_c <- (data$Fatalism - mean_fatalism) / iqr_fatalism
model_c <- lm(Depression ~ factor(age) + fatalism_c + Sex + R_E, data = data)
summary(model_c)
reduce <- lm(Depression ~ fatalism_c + Sex + R_E, data = data)
# Compare the reduced model with the full model using ANOVA
anova_table <- anova(reduce, model_c)
print(anova_table)
# Fit the regression model with age_cat as a continuous predictor
model_e <- lm(Depression ~ age + fatalism_c + Sex + R_E, data = data)
# View the summary of the model
summary(model_e)
mean_age <- mean(data$Age, na.rm = TRUE)
iqr_age <- IQR(data$Age, na.rm = TRUE)
data$Age_cont <- (data$Age - mean_age) / iqr_age
model_continuous <- lm(Depression ~ Age_cont + fatalism_c + Sex + R_E, data = data)
coeff_c <- summary(model_c)$coefficients
coeff_e <- summary(model_e)$coefficients
coeff_cont <- summary(model_continuous)$coefficients
comparison_table <- data.frame(
Predictor = c("fatalism_c", "Sex", "R_E"),
Model_C_Estimate = coeff_c[c("fatalism_c", "Sex", "R_E"), "Estimate"],
Model_E_Estimate = coeff_e[c("fatalism_c", "Sex", "R_E"), "Estimate"],
Model_Continuous_Estimate = coeff_cont[c("fatalism_c", "Sex", "R_E"), "Estimate"]
)
print(comparison_table)
data$age_score_10 <- with(data, ifelse(
age == 0, 0,
ifelse(age == 1, 10,
ifelse(age == 2, 20, 30))
))
data$age_score_300 <- with(data, ifelse(
age == 0, 0,
ifelse(age == 1, 10,
ifelse(age == 2, 20, 300))
))
avg_ages <- descriptive %>% arrange(age) %>% pull(Age_Mean)
data$age_score_avg <- with(data, ifelse(
age == 0, avg_ages[1],
ifelse(age == 1, avg_ages[2],
ifelse(age == 2, avg_ages[3], avg_ages[4]))
))
# Model with age_score_10
model_h1 <- lm(Depression ~ age_score_10 + fatalism_c + Sex + R_E, data = data)
summary_h1 <- summary(model_h1)
# Model with age_score_300
model_h2 <- lm(Depression ~ age_score_300 + fatalism_c + Sex + R_E, data = data)
summary_h2 <- summary(model_h2)
# Model with age_score_avg
model_h3 <- lm(Depression ~ age_score_avg + fatalism_c + Sex + R_E, data = data)
summary_h3 <- summary(model_h3)
# p-values
p_h1 <- summary_h1$coefficients["age_score_10", "Pr(>|t|)"]
p_h2 <- summary_h2$coefficients["age_score_300", "Pr(>|t|)"]
p_h3 <- summary_h3$coefficients["age_score_avg", "Pr(>|t|)"]
trend_pvalues <- data.frame(
Age_Score_Scheme = c("0, 10, 20, 30", "0, 10, 20, 300", "Average Age"),
P_Value = c(p_h1, p_h2, p_h3)
)
print(trend_pvalues)
model_interaction <- lm(Depression ~ fatalism_c * Sex + Age + Race_Ethnicity, data = data)
ncolname(data)
colname(data)
colname(data)
colname(data)
Colname(data)
library("sas7bdat")
data = read.sas7bdat("~/Desktop/BIOSTATS650/hw6/completedata.sas7bdat")
library("sas7bdat")
data = read.sas7bdat("~/Desktop/BIOSTATS650/hw6/completedata.sas7bdat")
library("sas7bdat")
data = read.sas7bdat("~/Desktop/BIOSTATS650/hw6/completedata.sas7bdat")
colnames(data)
model_interaction <- lm(Depression ~ fatalism_c * Sex + Age + Race_Ethnicity, data = data)
# Centering and scaling Fatalism using the provided IQR
data$fatalism_c <- (data$Fatalism - 17) / 8.5
# Fit the regression model with interaction between Fatalism and Sex
model_interaction <- lm(Depression ~ fatalism_c * Sex + Age + Race_Ethnicity, data = data)
# Centering and scaling Fatalism using the provided IQR
data$fatalism_c <- (data$Fatalism - 17) / 8.5
# Fit the regression model with interaction between Fatalism and Sex, adjusting for Age and R_E
model_interaction <- lm(Depression ~ fatalism_c * Sex + Age + R_E, data = data)
# Summary of the model
summary(model_interaction)
